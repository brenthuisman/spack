diff --git a/linalg/hypre.hpp b/linalg/hypre.hpp
index 48ed2e87ea..4367a8aab4 100644
--- a/linalg/hypre.hpp
+++ b/linalg/hypre.hpp
@@ -516,7 +516,14 @@ class HypreParMatrix : public Operator
 
    /// Initialize all entries with value.
    HypreParMatrix &operator=(double value)
-   { internal::hypre_ParCSRMatrixSetConstantValues(A, value); return *this; }
+   {
+#if MFEM_HYPRE_VERSION < 22200
+      internal::hypre_ParCSRMatrixSetConstantValues(A, value);
+#else
+      hypre_ParCSRMatrixSetConstantValues(A, value);
+#endif
+      return *this;
+   }
 
    /** Perform the operation `*this += B`, assuming that both matrices use the
        same row and column partitions and the same col_map_offd arrays, or B has
diff --git a/linalg/hypre_parcsr.cpp b/linalg/hypre_parcsr.cpp
index 9f66ba5e65..5053f5767f 100644
--- a/linalg/hypre_parcsr.cpp
+++ b/linalg/hypre_parcsr.cpp
@@ -1942,8 +1942,8 @@ HYPRE_Int
 hypre_ParCSRMatrixSetConstantValues(hypre_ParCSRMatrix *A,
                                     HYPRE_Complex       value)
 {
-   hypre_CSRMatrixSetConstantValues(hypre_ParCSRMatrixDiag(A), value);
-   hypre_CSRMatrixSetConstantValues(hypre_ParCSRMatrixOffd(A), value);
+   internal::hypre_CSRMatrixSetConstantValues(hypre_ParCSRMatrixDiag(A), value);
+   internal::hypre_CSRMatrixSetConstantValues(hypre_ParCSRMatrixOffd(A), value);
 
    return 0;
 }
diff --git a/linalg/hypre_parcsr.hpp b/linalg/hypre_parcsr.hpp
index 078e34e326..f974c731e4 100644
--- a/linalg/hypre_parcsr.hpp
+++ b/linalg/hypre_parcsr.hpp
@@ -198,6 +198,16 @@ hypre_CSRMatrixSum(hypre_CSRMatrix *A,
                    HYPRE_Complex    beta,
                    hypre_CSRMatrix *B);
 
+#if MFEM_HYPRE_VERSION >= 22200
+/** Provide an overloaded function for code consistency between HYPRE API
+    versions. */
+inline hypre_CSRMatrix *hypre_CSRMatrixAdd(hypre_CSRMatrix *A,
+                                           hypre_CSRMatrix *B)
+{
+   return ::hypre_CSRMatrixAdd(1.0, A, 1.0, B);
+}
+#endif
+
 /** Return a new matrix containing the sum of A and B, assuming that both
     matrices use the same row and column partitions. The col_map_offd do not
     need to be the same, but a more efficient algorithm is used if that's the
